{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12020\viewh13840\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Section 1 - Getting Started\

\b 1.1 Installing the tools 4m 42s
\b0 \

\b 1.2 Creating your first application 11m 28s
\b0 \

\b 1.3 Updates to this course 3m 31s
\b0 \
	Why do you think it's important to be aware of the idiosyncracies with older versions of\
	Objective-C and to keep up with new features as they are added?\
\
	-Because sometimes the new features can help you reduce your code and also make your life easier when 	implementing things like ARC instead of the old manual memory management\
\
Section 2 - Objective-C Basics\

\b 2.1 The Objective-C language 4m 11s
\b0 \
	How did Objective-C become the language to learn if you want to make apps for the iPhone\
	and iPad?\

\b \
	
\b0 -iPhone, iPad and iPod OS is built on objective-c, so usually is a better option to with the native 	programing language 
\b \
2.2 The structure of an Objective-C program 6m 15s\

\b0 	Create a new project. Go to the menu option Xcode/Preferences/Text_Editing and make sure\
	"Line Numbers" is checked in the section marked "Show." Then add comments describing the\
	purpose of each auto-generated line in the main.m file. For example on Line 17 I would write:\
	" NSLog(@"Hello, World!"); //instructs the console to output the phrase "Hello, World!")"\
\

\b 2.3 Compiling and running your code 8m 37s
\b0 \
	Why might you build in one version of iOS but deploy in an older version?\
\
	-That way it becomes usable on older OS versions\
\
Section 3 - Program Flow\

\b 3.1 Logging messages to the command line 6m 7s
\b0 \
	Following the example in the video, write a program that calculates and outputs to the\
	console the number of seconds in ten years. Copy and paste your code here.\

\b 3.2 Writing conditional code 7m 1s\

\b0 	Using Objective-C, create an integer variable called "day" that represents the days of the\
	week. Write an if statement that checks whether "day" is a weekend day. If the day is a\
	weekend day then have your program print a message saying "Have a nice weekend!" and if\
	it's not, print a message saying "I hope you're having a good week!"\

\b 3.3 The switch statement 5m 58s\

\b0 	Create a variable called "hurricaneCategory" and a switch statement that prints out a\
	message describing a hurricane's category from 1-5.\

\b 3.4 Code snippets 5m 15s
\b0 \
	Grab a code snippet, indent it to match the indent of your project, then add comments to it,\
	then select the entire snippet you just modified and save it as your own code snippet. Time\
	yourself and record how many seconds it takes you to do all this.\

\b 3.5 Operators and expressions 11m 8s\

\b0 	List the 6 types of operators described in this video. Provide their name, a description of\
	their meaning, and the syntax you would use to execute them. What code snippet does the\
	ternary operator replace?\
\
\pard\tx725\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 	Arithmetic operators\
\pard\pardeftab720
\cf0 		In order to make common operations like 5+5 10-10 a=b\
	Comparison operators\
		&& ||\
	Modulus\
		4%2\
	Increment/decrement\
		a += 10;\
	Prefix/postfix\
		a++\'a0\
		++a\
	Ternary\
		condition ? true : false;\
	Bitwise operators\
		<< >>\
\
	The ternary replaces the "if statement" code snippet\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \

\b 3.6 Loops 8m 53s
\b0 \
	CHALLENGE: Think of a scenario while using a mobile app that might require you to use a\
	"continue" statement in the middle of a loop.\
	\
	-An example could be if you have a for statement and inside you could have an if statement that checks the 	points and on certain points you print messages \

\b 3.7 Functions 10m 16s
\b0 			\
\pard\tx516\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 	What is a function? What is a function prototype? What are the purposes of each? What are\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 	the rules for when and how you can call a function?\
	\
	-A function is a set of instructions assigned to a name.\
	-A function prototype is a functions that accepts parameters, for example "int foo(int n)" in this function you 	are expecting an integer number and it will be named "n"\
\
Section 4 - Variables\

\b 4.1 Data types 7m 6s\

\b0 	What are the primitive data types in Objective-C? Why did Apple add a set of classes to\
	handle other data types?\
\
	-int, float, double, char and BOOL\
	-In order to add more functions. The instances of those classes allow you to do a lot of manipulations that 	you can't do on primitive data types  \

\b 4.2 Working with numbers 9m 33s
\b0 \
	Make a table of Objective-C primitive data types. Add numeric data types and their\
	properties to this table.\
	\
	int			4 bytes		integer numbers\
	long int		4-8 bytes 		integer numbers, size varies depending on the OS (32 or 64)\
	long long int	8 bytes		integer numbers\
	short			2 bytes		integer numbers\
	float			4 bytes		numbers with decimals\
	double		8 bytes		number with decimals\
	char						characters\
	BOOL					YES, NO\

\b 4.3 Working with characters 4m 39s\

\b0 	Add char and BOOL (the character data types) to your table created above.\

\b 4.4 Variable scope 8m 6s\

\b0 	Describe in your own words what the scope of a variable is in Objective-C\
	\
	-A scope in the level where a variable is defined, if you define a variable in an outer level, for example in the 	main function, it will be available on everything that is inside the function, but not outside	\

\b 4.5 Enumerations 3m 35s\

\b0 	What does "enum" allow you to do?\
	\
	-enum %i\
	I allows you to put information inside with a numeration assigned to it\

\b 4.6 Using typedef 2m 17s\

\b0 	When would you define your own data type versus use an enum?\
	\
	-When you will be using that definition of data type a lot of times\

\b 4.7 Preprocessor directives 5m 56s\

\b0 	Describe the three common preprocessor directives, #import, #define, and #if DEBUG. Come\
	up with one example where you would use each.\
	\
	-#import		used to import libraries, example 		#import <stdio.h>\
	#define		define variables for example 			#define PI 3.141565\
	#if DBUG		used to verify is you are deploying in debug mode												#if DEBUG NSLog(@"Debug mode!"); #endif\

\b 4.8 Working with strings 7m 52s\

\b0 	Define the same string using both NSString and C-style string syntax. Describe the purpose\
	behind each part of your definition.\
\
	string name = "Antonio";\
	NSString * name = @"Antonio";\
	\
	NSString is the name of the class, " * " tells us that its a pointer to an object, "name" is the name of the 	object and finally "@" tells us that this is a string. \
\
Section 5 - Classes\

\b 5.1 Introduction to object orientation 7m 36s
\b0 \
	Create an encapsulated (including generalized attributes and behavior) description of a\
	"mobileMakersParticipant" class. Instantiate a single object representing yourself as a member\
	of this class.\

\b 5.2 Using objects and pointers 6m 38s\

\b0 	What is the pointer's role in instantiating an object from a class? How is a pointer different\
	than a primitive?\
	\
	-The pointer will be the direction where the object is allocated. The difference is that a pointer holds up the 	memory address\

\b 5.3 Messages and methods 6m 44s\

\b0 	What is the main difference between Objective-C's messages and method calls in other\
	languages? How can this difference be seen as an advantage while programming?\
	\
	-Since you have the name of the object and the method that is being called, the code is easily readable 	when you are maintaining it\

\b 5.4 Using existing classes in the foundation framework 8m 40s\

\b0 	What's the difference between a class method and an instance method? EXPLORE: Try typing\
	"NSD\'85" into your code window. Use the autofill feature and select a single class name that\
	starts with those three letters. Once the name has been auto-completed, use the handy\
	shortcut (Option + click) and investigate the class whose name just got printed to the\
	screen. Examine the task list for this class. Do this a few more times until you're familiar with\
	the process, or until you've exhausted your curiosity, whichever comes last.\
\
Section 6 - Memory Management\

\b 6.1 What's new with memory management? 1m 45s\

\b0 	Let it soak in. No questions for this one.\

\b 6.2 Memory management in Objective-C 6m 58s\

\b0 	What is the relationship between a pointer to an object, a block of memory, and the owning\
	and releasing process. Can you come up with an analogy for this relationship?\
	\
	-A pointer is the address of the object, the block of memory is where the object is stored. if you own an 	object means that you created or copied it finally releasing it means to tell the computer that the block of 	memory where it is stored is no longer needed\

\b 6.3 Object creation 7m 31s\

\b0 	What does the new method do when used to create an object instance of a class? Why do\
	we avoid using this method? How long is an object's lifetime?\
	\
	-It automatically initializes and allocates the object, if you want to do any special initialization the you need 	to do the alloc and init in separate steps. The object exists once you create it until you release it.\

\b 6.4 Using autorelease pools 5m 14s\

\b0 	How does the autorelease pool work? How and when can you use it deliberately?\

\b 	\
	
\b0 -It basically adds the object that needs to be released to a list, like a waiting list, where they will be later 	released. You should now use it always, but can be use for example when you have a factory method. 
\b \
\
6.5 Apple autoreleased objects 3m 39s\

\b0 	What does NARC stand for? Why is it important to remember this?\
	\
	-new\
	-alloc\
	-retain\
	-copy\
\
	-Because you only need the release function when you have any of these words.\
\

\b 6.6 Introduction to Automatic Reference Counting (ARC) 4m 43s\

\b0 	What does ARC save us from having to do? How does it keep us from having to make this\
	extra effort?\
	\
	-You no longer need to use the retain and release words in your program, it saves you from doing it 	because it has a powerful algorithm that decides where to put these two words for you.\
\

\b 6.7 What ARC manages 2m 42s\

\b0 	What are the differences between ARC and garbage collection? What makes these\
	differences advantageous?\
\
	-ARC happens during compile-time and garbage collection during runtime, since garbage collection runs 	during runtime i can sometimes make programs slow when memory is being reclaimed because i happens 	unpredictably.\

\b 6.8 The rules of ARC 4m 20s\

\b0 	Why can you not release or dealloc memory when working with ARC?\
	\
	-Because ARC is already doing that for you automatically.\
\
Section 7 - Custom Classes\

\b 7.1 Creating your own classes 14m 1s\

\b0 	What are the two different sections used to create a class? What do they hold and what files are they 	placed in? CHALLENGE: Create a Tweet class for a twitter style app.\
\
\
7.2 Defining methods 8m 36s\
CHALLENGE: Define what should get passed in and what should get returned by each of your\
methods in your Tweet class above.\
7.3 Defining properties 7m 21s\
How did Objective-C programmers handle instance variables before 2012? How are they\
handled now? What got easier and what got obscured?\
7.4 Defining initializers 12m 30s\
What are initializers and why do we need to use them? Describe a situations when you can\
rely on the standard init method and when you have to create your own custom initializer.\
7.5 Using dealloc 5m 33s\
Why can we have a dealloc method in a class when using ARC, but we can't call dealloc\
manually oursevles when using ARC?\
Section 8 - Collections\
8.1 Working with C-style arrays 7m 12s\
What are the three constraints when using C-style arrays? Create a C-style array that holds\
the days of the week.\
8.2 Working with Objective-C array objects 8m 0s\
What is the difference between a mutable and an immutable array? CHALLENGE: Create an\
immutable array containing the days of the week. Create a mutable array that contains the\
days of the week that you will be at Mobile Makers. Add the days of the week from the\
immutable array to the mutable array.\
8.3 Using dictionaries 5m 55s\
Create a dictionary that lists five or more events in your life and the accompanying year (or\
date if you want to get fancy) of the event.\
8.4 Fast enumeration 3m 27s\
Use fast enumeration to log the timeline of the life events you described above to the\
console.\
Section 9 - File Management\
9.1 Introduction to file management in Objective-C 6m 44s\
What can you do with files using the methods you are aware of that are available in\
Objective C's Foundation class.\
9.2 Working with paths and URLs 7m 17s\
What are the three parts of a URL? What are the advantages to using NSURL?\
9.3 Reading and writing strings 4m 38s\
What would be a reason you would want to write a string to disk instead of just keeping it\
memory?\
9.4 Archiving objects 12m 41s\
Why would you want to archive an object instead of writing the data to disk using the\
techniques discussed previously?\
Section 10 - More Complex Classes\
10.1 Inheritance and NSObject 8m 13s\
How can you determine what methods you're inheriting from a super class? How do you\
overide a method inherited from a super class?\
10.2 Extending classes with categories 6m 31s\
What is the difference between a category and an inheritance? What are the limitations of\
using a category?\
10.3 Defining protocols 5m 14s\
How are protocols useful?\
10.4 Dynamic typing 11m 33s\
What are the advantages and disadvantages to dynamic typing?}